{
	"info": {
		"_postman_id": "8baa59f8-cb5b-412b-a3c3-6ff6ae7a0371",
		"name": "demo-vector",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29892805"
	},
	"item": [
		{
			"name": "/2.0/vectordb/collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"string\",\r",
							"    \"pattern\": \"^[a-zA-Z0-9_]+$\"\r",
							"  },\r",
							"  \"uniqueItems\": true,\r",
							"  \"minItems\": 1\r",
							"};\r",
							"pm.test('Schema is valid', function() {\r",
							"    const response = pm.response.json();\r",
							"    const validationResult = tv4.validateResult(response, schema);\r",
							"    pm.expect(validationResult.valid).to.be.true;\r",
							"    if (!validationResult.valid) {\r",
							"        console.log(validationResult.errors);\r",
							"    }\r",
							"});\r",
							"pm.test(\"Response must be array of collections\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array')  \r",
							"});\r",
							"pm.test(\"Array is not empty\", function () {\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);\r",
							"});\r",
							"pm.test(\"No duplicate values in array\", function () {\r",
							"    const array = pm.response.json();\r",
							"    const set = new Set(array);\r",
							"    pm.expect(array.length).to.eql(set.size);\r",
							"});\r",
							"pm.test(\"All values are strings\", function () {\r",
							"    pm.response.json().forEach(item => {\r",
							"        pm.expect(typeof item).to.eql('string');\r",
							"    });\r",
							"});\r",
							"pm.test(\"No empty strings in array\", function () {\r",
							"    pm.response.json().forEach(item => {\r",
							"        pm.expect(item).to.not.eql('');\r",
							"    });\r",
							"});\r",
							"pm.test(\"No null or undefined values in array\", function () {\r",
							"    pm.response.json().forEach(item => {\r",
							"        pm.expect(item).to.not.be.null;\r",
							"        pm.expect(item).to.not.be.undefined;\r",
							"    });\r",
							"});\r",
							"pm.test(\"No prohibited special characters in strings\", function () {\r",
							"    const prohibitedChars = ['%', '$', '#']; // replace with actual prohibited characters\r",
							"    pm.response.json().forEach(item => {\r",
							"        prohibitedChars.forEach(char => {\r",
							"            pm.expect(item.includes(char)).to.be.false;\r",
							"        });\r",
							"    });\r",
							"});\r",
							"pm.test(\"No whitespace characters in strings\", function () {\r",
							"    pm.response.json().forEach(item => {\r",
							"        pm.expect(/\\s/.test(item)).to.be.false;\r",
							"    });\r",
							"});\r",
							"pm.test(\"Array has at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should have at least one element\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "clientSecret",
							"value": "03ab60d6-e93c-4608-982c-411d1663f98eca40aee9-144a-414d-9c92-3a227ccd534c",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "075c8437-5e0c-4cba-a5ef-0acb91f37805",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Unicorn AI",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://apigw-st.telus.com/st/token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "redirect_uri",
							"value": "https://www.getpostman.com/oauth2/callback",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://teamsso-its04.telus.com/as/authorization.oauth2",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://ai-np.cloudapps.telus.com/unicorn-brain/2.0/vectordb/collection",
					"protocol": "https",
					"host": [
						"ai-np",
						"cloudapps",
						"telus",
						"com"
					],
					"path": [
						"unicorn-brain",
						"2.0",
						"vectordb",
						"collection"
					]
				}
			},
			"response": []
		}
	]
}